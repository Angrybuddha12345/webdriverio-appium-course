version: 2.1

jobs:
  ios:
    macos: # indicate that we are using the macOS executor
      xcode: 14.3.1
    environment:
      IOS_VERSION: 16.4
      DEVICE_NAME: iPhone 14 Pro
    steps:
      - run:
          name: Install Rosetta 2
          command: |
            if /usr/sbin/softwareupdate --install-rosetta --agree-to-license; then
              echo "Rosetta installed successfully or already present"
            else
              echo "Rosetta installation failed"
              exit 1
            fi
      - checkout
      - run:
          name: Install nvm
          command: |
            # Install nvm (Node Version Manager)
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            # Ensure nvm is sourced in the current session
            source ~/.nvm/nvm.sh
      - run:
          name: Install Node.js v20.15.0 and npm
          command: |
            # Load nvm to make sure it's available
            source ~/.nvm/nvm.sh
            # Install Node.js v20.15.0 (npm will be installed automatically with Node.js)
            nvm install 20.15.0
            # Use Node.js v20.15.0 as the active version
            nvm use 20.15.0
            # Add npm binary to PATH explicitly
            export PATH="$HOME/.nvm/versions/node/v20.15.0/bin:$PATH"
            # Verify the installed Node.js and npm versions
            node -v
            npm -v
            npm install
            npm install -g appium
            appium -v
            appium -p 4723 &
            sleep 10
            npx wdio config/wdio.ios.conf.js
  android:
    macos: # indicate that we are using the macOS executor
      xcode: 14.3.1
    environment:
      JAVA_HOME: /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
      ANDROID_SDK_ROOT: /usr/local/Caskroom/android-sdk/4333796
    steps:
      - checkout
      - run: |
          brew install --cask homebrew/cask-versions/adoptopenjdk8
          brew install gradle
          brew install android-sdk
          brew install android-platform-tools
          brew install --cask intel-haxm
      - run: |
          export PATH=$JAVA_HOME/bin:$PATH
          echo "y" | sdkmanager --install 'system-images;android-28;google_apis;x86_64'
          echo "no" | avdmanager create avd -n test_device -k 'system-images;android-28;google_apis;x86_64' --force
          emulator -list-avds
          ls -la /Users/$USER/.android/avd
          sdkmanager "platform-tools" "platforms;android-28"
      - run:
          name: Starting emulator in background
          command: export ANDROID_AVD_HOME=/Users/$USER/.android/avd && export ANDROID_HOME=$ANDROID_SDK_ROOT && $ANDROID_HOME/emulator/emulator -avd test_device -skin 1080x1920 -memory 1024 -engine qemu2 -netfast -no-audio -no-snapshot -accel on
          background: true
      - run: |
          adb wait-for-device
          adb devices
          echo "Emulator started"
      - run: |
          rm -rf node_modules
          npm cache clean --force
          rm -rf package-lock.json
      - run: npm install --save-dev
      - run: npm audit fix
      - run: npm install --save-dev chai
      - run:
          name: Starting metro in background
          command: npm start --reset-cache &> metro-android.log
          background: true
      - run:
          name: Run E2E Tests - Android
          command: npm run e2e-test:android -- Sanity &> test-execution-console-android.log
          no_output_timeout: 30m
      - store_artifacts:
          path: metro-android.log
          destination: metro-android.log
      - store_artifacts:
          path: build-android.log
          destination: build-android.log
      - store_artifacts:
          path: test-execution-console-android.log
          destination: test-execution-console-android.log
      - store_artifacts:
          path: __tests__/e2e/test-results
          destination: test-results-android
workflows:
  build_and_test:
    jobs:
      - ios
